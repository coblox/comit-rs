version: 2.1
workflows:
  version: 2
  main:
    jobs:
      - setup:
          filters: # required since other jobs has tag filters AND require `setup`
            tags:
              only: /.*/
      - debug-build-test:
          requires:
            - setup
          filters: # Do not run when tagged for a release
            tags:
              ignore: /^\d+\.\d+\.\d+$/
      - release-build-test:
          requires:
            - setup
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
      - publish-github-release:
          requires:
            - release-build-test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/

jobs:
  setup:
    working_directory: ~/comit
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      RUST_TEST_THREADS: "8"
    steps:
      - checkout
      - restore_caches
      - install_rust
      - install_node_devlibs
      - print_current_versions
      - persist_to_workspace:
          root: ~/
          paths:
            - comit
            - .cargo
            - .local
            - .rustup
            - .npm
            - .nvm

  debug-build-test:
    working_directory: ~/comit
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      RUST_TEST_THREADS: "8"
    steps:
      - attach_workspace:
          at: ~/
      - setup_rust_env
      - install_node_devlibs
      - print_current_versions
      - run:
          name: Debug build and test using cargo make
          command: cargo make ci
      - store_artifacts:
          path: api_tests/log
      - save_caches

  release-build-test:
    working_directory: ~/comit
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      RUST_TEST_THREADS: "8"
    steps:
      - attach_workspace:
          at: ~/
      - setup_rust_env
      - install_node_devlibs
      - print_current_versions
      - run:
          name: Debug build and test using cargo make
          command: |
            export CARGO_MAKE_CARGO_BUILD_TEST_FLAGS="--all-features --release"
            cargo make ci
      - store_artifacts:
          path: api_tests/log
      - persist_to_workspace:
          root: ./
          paths:
            - ./

  publish-github-release:
    working_directory: ~/comit
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      RUST_TEST_THREADS: "8"
    steps:
      - attach_workspace:
          at: ~/
      - setup_rust_env
      - install_node_devlibs
      - print_current_versions
      - run:
          name: "Build release binary for btsieve"
          command: cargo install --path ./btsieve --root ./artifacts
      - run:
          name: "Build release binary for cnd"
          command: cargo install --path ./cnd --root ./artifacts
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=$(cargo pkgid -- cnd|cut -d# -f2)
            ghr -t ${GITHUB_TOKEN_FOR_RELEASES} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts/bin

commands:
  install_node_devlibs:
    steps:
      - run:
          name:  "Setup system environment"
          command: |
            rm -rf /opt/circleci/.nvm
            sudo systemctl stop apt-daily.service
            sudo systemctl kill --kill-who=all apt-daily.service
            # wait until `apt-get updated` has been killed
            while ! (sudo systemctl list-units --all apt-daily.service | egrep -q '(dead|failed)') ; do sleep 1; done
            curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            curl -sL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            echo "deb https://deb.nodesource.com/node_10.x/ trusty main" | sudo tee /etc/apt/sources.list.d/node_10.list
            sudo apt-get update
            sudo apt-get install -y nodejs=10.* yarn libzmq3-dev
  install_rust:
    steps:
      - run:
          name:  "Install Rust"
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $(< rust-toolchain) && source $HOME/.cargo/env
            rustup install nightly-2019-07-31
            rustup component add rustfmt --toolchain nightly-2019-07-31

            # Define variables that need interpolation
            # As CircleCI starts a new shell for each `run` declaration, we need to export cargo home to $BASH_ENV
            echo 'export PATH=$HOME/.cargo/bin:$HOME/.local/bin:$PATH' >> $BASH_ENV
            which cargo-make && test "$(cargo make --version)" = "cargo-make 0.19.4" || cargo install cargo-make --force
  setup_rust_env:
    steps:
      - run:
          name: "Setup Rust environment"
          command: echo 'export PATH=$HOME/.cargo/bin:$HOME/.local/bin:$PATH' >> $BASH_ENV
  print_current_versions:
    steps:
      - run:
          name: "Prints version for rust, etc"
          command: |
            echo 'node --version' $(node --version)
            echo 'yarn --version' $(yarn --version)
            echo 'rustc --version' $(rustc --version)
            echo 'cargo --version' $(cargo --version)
            echo "pwd $(pwd)"
            echo "whomai $(whoami)"
            echo "CARGO_HOME" $CARGO_HOME
            echo "RUSTUP_HOME" $RUSTUP_HOME
  restore_caches:
    steps:
      - restore_cache:
          keys:
            - rustup-{{ checksum "rust-toolchain" }}-nightly-2019-07-31
            # We don't want multiple toolchains to pile up in our cache, so only restore the ones we actually use.
      - restore_cache:
          keys:
            - cargo-{{ .Branch }}
            - cargo
      - restore_cache:
          keys:
            - target-folder-{{ checksum "Cargo.lock" }}
            # We don't want the target folder to blow up over time, hence we only download the cache if it exactly matches `Cargo.lock`
      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "api_tests/yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-
  save_caches:
    steps:
      - save_cache:
          paths:
            - ~/.rustup
          key: rustup-{{ checksum "rust-toolchain" }}-nightly-2019-07-31
      - save_cache:
          paths:
            - ~/.cargo
          key: cargo-{{ .Branch }}
      - save_cache:
          key: target-folder-{{ checksum "Cargo.lock" }}
          paths:
            - "./target"
      - save_cache:
          paths:
            - ~/.cache/yarn
            - api_tests/node_modules
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "api_tests/yarn.lock" }}
