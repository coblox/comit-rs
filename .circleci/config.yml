version: 2.1
workflows:
  version: 2
  main:
    jobs:
      - debug-build-test:
          filters: # ignore .tmp branches from bors
            branches:
              ignore: /^(staging.tmp|trying.tmp)$/
      - release-build-test:
          filters: # runs for "release/" branches and all tags.
            branches:
              only: /^release\/*$/
            tags:
              only: /.*/

jobs:
  debug-build-test:
    working_directory: ~/comit
    machine:
      image: ubuntu-1604:201903-01
    environment:
      RUST_TEST_THREADS: "8"
    steps:
      - checkout
      - run:
          name: Stop the job if no source code has changed
          command: |
            git diff --name-only `git merge-base origin/master HEAD` | grep -v -q -e '\.md' -e '\.mergify\.yml' -e '\.dependabot/' || circleci step halt
      - run:
          name: TODOs or FIXMEs are not allowed
          command: |
            sudo snap install ripgrep --classic
            ! /snap/bin/rg todo --type rust --type ts --ignore-case || exit 1;
            ! /snap/bin/rg fixme --type rust --type ts --ignore-case || exit 1;
      - restore_caches
      - install_rust
      - install_node_devlibs
      - install_lnd
      - print_current_versions
      - run:
          name: Debug build and test
          command: make ci
      - store_artifacts:
          path: api_tests/log
      - save_caches

  release-build-test:
    working_directory: ~/comit
    machine:
      image: ubuntu-1604:201903-01
    environment:
      RUST_TEST_THREADS: "8"
    steps:
      - checkout
      - restore_caches
      - install_rust
      - install_node_devlibs
      - install_lnd
      - print_current_versions
      - run:
          name: Release build and test
          command: |
            export CND_BIN=~/comit/target/release/cnd
            make ci BUILD_ARGS='--release'

commands:
  install_node_devlibs:
    steps:
      - run:
          name:  "Install node and development libraries"
          command: |
            rm -rf /opt/circleci/.nvm
            sudo systemctl stop apt-daily.service
            sudo systemctl kill --kill-who=all apt-daily.service
            # wait until `apt-get updated` has been killed
            while ! (sudo systemctl list-units --all apt-daily.service | egrep -q '(dead|failed)') ; do sleep 1; done
            curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            curl -sL https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            echo "deb https://deb.nodesource.com/node_10.x/ trusty main" | sudo tee /etc/apt/sources.list.d/node_10.list
            sudo apt-get update
            sudo apt-get install -y nodejs=10.* yarn
  install_rust:
    steps:
      - run:
          name:  "Install Rust"
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $(< rust-toolchain) && source $HOME/.cargo/env
            rustup install nightly-2019-07-31
            rustup component add rustfmt --toolchain nightly-2019-07-31

            # Define variables that need interpolation
            # As CircleCI starts a new shell for each `run` declaration, we need to export cargo home to $BASH_ENV
            echo 'export PATH=$HOME/.cargo/bin:$HOME/.local/bin:$PATH' >> $BASH_ENV
  install_lnd:
    steps:
      - run:
          name:  "Install go 1.13 & lnd"
          command: |
            sudo rm -rf /usr/local/go
            wget https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz
            sudo tar -xzvf go1.13.3.linux-amd64.tar.gz -C /usr/local/
            unset GOPATH
            go get -d github.com/lightningnetwork/lnd
            cd ~/go/src/github.com/lightningnetwork/lnd
            git checkout v0.9.0-beta
            make tags=invoicesrpc && make tags=invoicesrpc install
            echo 'export PATH=$HOME/.cargo/bin:$HOME/.local/bin:$HOME/go/bin:$PATH' >> $BASH_ENV
  print_current_versions:
    steps:
      - run:
          name: "Prints version for rust, etc"
          command: |
            echo 'node --version' $(node --version)
            echo 'yarn --version' $(yarn --version)
            echo 'rustc --version' $(rustc --version)
            echo 'cargo --version' $(cargo --version)
            echo "pwd $(pwd)"
            echo "whomai $(whoami)"
            echo "CARGO_HOME" $CARGO_HOME
            echo "RUSTUP_HOME" $RUSTUP_HOME
  restore_caches:
    steps:
      - restore_cache:
          keys:
            - rustup-{{ checksum "rust-toolchain" }}-nightly-2019-07-31
            # We don't want multiple toolchains to pile up in our cache, so only restore the ones we actually use.
      - restore_cache:
          keys:
            - cargo-{{ .Branch }}
            - cargo
      - restore_cache:
          keys:
            - target-folder-{{ checksum "Cargo.lock" }}
            # We don't want the target folder to blow up over time, hence we only download the cache if it exactly matches `Cargo.lock`
      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "api_tests/yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-
  save_caches:
    steps:
      - save_cache:
          paths:
            - ~/.rustup
          key: rustup-{{ checksum "rust-toolchain" }}-nightly-2019-07-31
      - save_cache:
          paths:
            - ~/.cargo
          key: cargo-{{ .Branch }}
      - save_cache:
          key: target-folder-{{ checksum "Cargo.lock" }}
          paths:
            - "./target"
      - save_cache:
          paths:
            - ~/.cache/yarn
            - api_tests/node_modules
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "api_tests/yarn.lock" }}
