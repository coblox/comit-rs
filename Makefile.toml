[env]
BITCOIND_ADDITIONAL_SLEEP_PERIOD = "500"

# ###########################################################
# Override defaults tasks to allow the use of default flows #

# Overridden because: default task should be quick and default task was alias for dev-test-flow.
[tasks.default]
description = "Format, build and run the Rust tests. No clippy nor end-to-end."
workspace = false
dependencies = [
     "format",
     "build",
     "test"
]

# Overridden because: added dependencies
[tasks.pre-ci-flow]
workspace = false
dependencies = [
    "start-sccache",
    "pull-docker-images",
]

# Overridden because: added dependencies
[tasks.pre-build]
workspace = false
dependencies = [
    "check-format",
    "clippy"
]

# Overridden because: specified dependencies
[tasks.post-test]
workspace = false
dependencies = [
    "lqs",
    "e2e",
    "dry",       
]

# Overridden because: added dependencies
[tasks.post-ci-flow]
workspace = false
dependencies = [
    "stop-sccache",
    "clean-registry"
]

# Overridden because: added workspace
[tasks.ci-flow]
workspace = false

# Overridden because: we want --all-targests
[tasks.build]
workspace = false
args = ["build", "--all", "--all-targets"]

# Overridden because: we want --all-targests
[tasks.build-verbose]
workspace = false
args = ["build", "--all", "--all-targets", "--verbose"]

# Overridden because: we want --all-targests
[tasks.test-verbose]
workspace = false
args = ["test", "--all", "--all-targets", "--verbose"]

[tasks.init]
script = [
'''
git config core.hooksPath .githooks
'''
]

################
# Task aliases #

[tasks.all]
workspace = false
alias = "dev-test-flow"

[tasks.e2e]
workspace = false
alias = "e2e-tests-flow"

[tasks.dry]
workspace = false
alias = "dry-tests-flow"

[tasks.lqs]
workspace = false
alias = "lqs-tests-flow"

################
# Custom tasks #

[tasks.check-format]
description = "Runs cargo fmt to check appropriate code format."
workspace = false
install_crate = { crate_name = "fmt", rustup_component_name = "rustfmt-preview", binary = "rustfmt", test_arg = "--help" }
command = "cargo"
args = ["fmt", "--", "--check"]


[tasks.clean-registry]
# The cargo registry cache grows continuously over time, making our build take longer and longer because it is cached on S3.
# This command removes everything that is older than 30 days, thus keeping only very recent libraries.
description = "Delete old files from the cargo registry cache."
workspace = false
private = true
mac_alias = "clean-registry-mac"
linux_alias = "clean-registry-linux"

[tasks.clean-registry-linux]
condition = { platforms = ["linux"] }
workspace = false
private = true
force = true
script = [
'''
find $HOME/.cargo/registry/src $HOME/.cargo/registry/cache \
    -mindepth 2 -type d -ctime 30 -exec rm -rf "{}" \;
'''
]

[tasks.travis]
workspace = false
# Even though we only have 2 cores on Travis, we mostly wait for containers in our tests. Doing that in parallel saves us some time! (8 is just an arbitrary number!)
env = { "RUST_TEST_THREADS" = "8", "RUSTC_WRAPPER" = "${HOME}/.cargo/bin/sccache", "CAT_LOGS" = "true" }
run_task = "ci-flow"

[tasks.clean-registry-mac]
condition = { platforms = ["mac"] }
workspace = false
private = true
force = true
script = [
'''
find $HOME/.cargo/registry/src $HOME/.cargo/registry/cache \
    -depth 2 -type d -mtime +30d -exec rm -rf "{}" \;
'''
]

[tasks.pull-docker-images]
# We use several docker images in our build through testcontainers.
# Because those tests run in parallel, we pull the images here so that we only download them once.
description = "Pull docker images needed to run tests."
workspace = false
private = true
script = [
'''
docker pull parity/parity:v1.11.11
docker pull coblox/bitcoin-core:0.16.1-r2
docker pull ruimarinho/bitcoin-core:0.17.0-alpine
'''
]

[tasks.start-sccache]
description = "Setup & start sscache"
workspace = false
private = true
install_script = ["which sccache || (unset RUSTC_WRAPPER; cargo install sccache)"]
env = { "SCCACHE_CACHE_SIZE" = "400M" }
# Start sccache with limited cache size to avoid a constantly
# growing caches (and thus continuously slower builds)
command = "sccache"
args = ["--start-server"]

[tasks.stop-sccache]
description = "Stop sscache"
workspace = false
private = true
command = "sccache"
args = ["--stop-server"]


#####################
# Dry api Test flow #
[tasks.dry-tests-flow]
description = "Defines the E2E-tests flow."
workspace = false
dependencies = [
    "build",
    "pre-dry-tests",
    "dry-tests"
]

[tasks.dry-tests]
description = "Runs tests that don't require any external services"
env = { "LOG_DIR" = "./dry/log" }
workspace = false
private = true
script_runner = "bash"
script = [
'''
cd api_tests;
./dry/harness.sh ./dry/rfc003.js
'''
]

[tasks.pre-dry-tests]
alias = "pre-e2e-tests"

#################
# E2E Test flow #
[tasks.e2e-tests-flow]
description = "Defines the E2E-tests flow."
workspace = false
dependencies = [
    "build",
    "pre-e2e-tests",
    "e2e-tests",
    "post-e2e-tests",
]

[tasks.pre-e2e-tests]
description = "Install dependencies for e2e tests."
workspace = false
private = true
script_runner = "bash"
script = [
'''
set +x;
export NVM_SH=$([ -e $NVM_DIR/nvm.sh ] && echo "$NVM_DIR/nvm.sh" || echo /usr/local/opt/nvm/nvm.sh );
. "$NVM_SH"
cd api_tests;
nvm install;
nvm use node;
yarn install
'''
]

[tasks.e2e-tests]
# Usage: `cargo make e2e <folder>` folder can be:
# - empty (run all tests)
# - btc_eth or btc_eth-erc20
description = "Runs RFC003 end-to-end tests specified on command line. Supports GLOB."
workspace = false
private = true
script_runner = "bash"
script = [
'''
export PARAMS=$@;
[[ -z ${PARAMS} ]] && export PARAMS=$(ls ./api_tests/e2e/rfc003/);
export ROOT=$(pwd);
for GLOB_DIR in ${PARAMS}; do
    cd "$ROOT/api_tests/e2e/rfc003/"
    for DIR in ${GLOB_DIR}; do
        cd "$ROOT";
        export LOG_DIR="./e2e/rfc003/${DIR}/log";
        ./api_tests/e2e/comit-harness.sh ./api_tests/e2e/rfc003/${DIR}
    done;
done;
'''
]

[tasks.post-e2e-tests]
workspace = false
private = true

######################################
# Ledger Query Service API Test flow #
[tasks.lqs-tests-flow]
description = "Defines the ledger_query_service API tests flow."
workspace = false
dependencies = [
    "build",
    "pre-lqs-tests",
    "lqs-tests",
    "post-lqs-tests",
]

[tasks.pre-lqs-tests]
alias = "pre-e2e-tests"

[tasks.lqs-tests]
description = "Runs ledger_query_service API tests."
workspace = false
private = true
env = { "LOG_DIR" = "./ledger_query_service/log" }
script_runner = "bash"
script = [
'''
set +x;
export NVM_SH=$([ -e $NVM_DIR/nvm.sh ] && echo "$NVM_DIR/nvm.sh" || echo /usr/local/opt/nvm/nvm.sh );
. "$NVM_SH"
cd api_tests;
nvm use;
./ledger_query_service/harness.sh ./ledger_query_service/test.js
'''
]

[tasks.post-lqs-tests]
workspace = false
private = true
